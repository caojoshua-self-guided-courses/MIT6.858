# NOTE: not really taking this that seriously cause I'm not getting
# graded. This is more just taking notes.

[zookd.c:40]
Can buffer overflow beyond the end of svcfds by providing number
of services greater than MAX_SERVICES(256). Overflow can occuer
only by input directly from the server-side, and not through client
provided http inputs.

    if (recvfd(fd, url, sizeof(url), &svcfds[i]) <= 0)

[zookd.c:45]
Can buffer overflow beyond the end of svcurls by providing number
of services greater than MAX_SERVICES(256). Overflow can occuer
only by input directly from the server-side, and not through client
provided http inputs.

    if (regcomp(&svcurls[i], regexp, REG_EXTENDED | REG_NOSUB))

[http.c:158]
url_decode will copy the contents of sp of potential size 8192
into value of size 512. value is a stack variable so the return
address can be overflowed with an HTTP request with request headers
of size greater than 512.

        /* Decode URL escape sequences in the value */
        url_decode(value, sp);

[http.c:165]
sprintf is not a safe library function and can write beyond the end
of envvar. envvar, which is a stack variable is size 512, while buf
is size 8192 and is provided through user http input. The server
does some string manipulation, such as changing lowercase characters
to uppercase, so code injection might be challenging here. The
buffer overflow is still vulnerable to ROP attacks.

    sprintf(envvar, "HTTP_%s", buf);

[http.c:282]
strcat is not a safe library function and can write beyond the end
of name. name is provided through the REQUEST_URI environment
variable. A long REQUEST_URI can be embedded into the HTTP request
to overwrite pn, which is a stack variable, to overwrite the
return address.

    strcat(pn, name);

[http.c:94]
sprintf can write beyond the end of envp. envp aliases with env in
process_client, which is a static variable of size 8192. The attacker
could potentially overflow nearby data structures with malicious data.
For example, an attacker could supply request `GET /foo.html
<lots of junk bytes that go beyond envp>`.

    envp += sprintf(envp, "REQUEST_METHOD=%s", buf) + 1;
    envp += sprintf(envp, "SERVER_PROTOCOL=%s", sp2) + 1;

[http.c:101]
sprintf can overflow envp if the request-uri is long. For example,
`GET /foo.html?<lots of bytes> HTTP/1.0`

    envp += sprintf(envp, "QUERY_STRING=%s", qp + 1) + 1;

[http.c:105]
url_decode is basically a memcpy with some additional checks on
certain characters. reqpath points to a stack buffer of size 2048
in process_client. sp1 points to a string representing the
request-uri, which can contain up to (8192 - 1) bytes. Therefore,
if the attacker can provide a buffer with request-uri of size
greater than 2048 bytes to buffer overflow reqpath.

    url_decode(reqpath, sp1);

[http.c:347]
strcat can overflow dst, which aliases with name in http_serve_directory,
and overwrite a return address. filename is user provided in the
HTTP request uri.

    strcat(dst, filename);
