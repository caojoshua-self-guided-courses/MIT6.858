!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#header 	zoobar/media/zoobar.css	/^#header {$/;"	i
#login 	zoobar/media/zoobar.css	/^#login { background-image: url(lion_sleeping.jpg); font-weight: bold; }$/;"	i
#login table 	zoobar/media/zoobar.css	/^#login table { margin: 18px 30px 0px 30px; }$/;"	i
#main 	zoobar/media/zoobar.css	/^#main { background-image: url(lion_awake.jpg); }$/;"	i
#main table 	zoobar/media/zoobar.css	/^#main table {$/;"	i
#main td 	zoobar/media/zoobar.css	/^#main td { text-align: center; }$/;"	i
.centerpiece 	zoobar/media/zoobar.css	/^.centerpiece {$/;"	c
.centerpiece td 	zoobar/media/zoobar.css	/^.centerpiece td { height: 0px; } $/;"	c
.centerpiece td.main 	zoobar/media/zoobar.css	/^.centerpiece td.main { height: 130px; } $/;"	c
.centerpiece textarea 	zoobar/media/zoobar.css	/^.centerpiece textarea { width: 90%; height: 100px; }$/;"	c
.footer 	zoobar/media/zoobar.css	/^.footer { text-align: center; }$/;"	c
.log 	zoobar/media/zoobar.css	/^.log {$/;"	c
.profilecontainer 	zoobar/media/zoobar.css	/^.profilecontainer { $/;"	c
.warning 	zoobar/media/zoobar.css	/^.warning { color: #A00000; font-weight: bold; }$/;"	c
ARGV	shellcode.S	/^#define ARGV	(STRLEN+1)$/;"	d
ASFLAGS	Makefile	/^ASFLAGS := -m32$/;"	m
CFLAGS	Makefile	/^CFLAGS  := -m32 -g -std=c99 -Wall -Werror -D_GNU_SOURCE$/;"	m
CGIHandler	zoobar/index.cgi	/^from wsgiref.handlers import CGIHandler$/;"	i
ENVP	shellcode.S	/^#define ENVP	(ARGV+4)$/;"	d
Flask	zoobar/__init__.py	/^from flask import Flask, g$/;"	i
Head	check-bugs.py	/^Head = collections.namedtuple("Head", "file line")$/;"	v
KEY_FILE	submit.py	/^KEY_FILE = "submit.token"$/;"	v
LDFLAGS	Makefile	/^LDFLAGS := -m32$/;"	m
LDLIBS	Makefile	/^LDLIBS  := -lcrypto$/;"	m
MAX_GIDS	zookld.c	19;"	d	file:
MAX_SERVICES	zookd.c	12;"	d	file:
MAX_SERVICES	zookld.c	18;"	d	file:
Markup	zoobar/login.py	/^from flask import g, redirect, render_template, request, url_for, Markup$/;"	i
Markup	zoobar/users.py	/^from flask import g, render_template, request, Markup$/;"	i
PATH	Makefile	/^      PATH := $(PATH):\/usr\/sbin$/;"	m
PROGS	Makefile	/^PROGS   := zookld zookfs zookd \\$/;"	m
Person	zoobar/zoodb.py	/^class Person(PersonBase):$/;"	c
PersonBase	zoobar/zoodb.py	/^PersonBase = declarative_base()$/;"	v
STRING	shellcode.S	/^#define STRING	"\/bin\/sh"$/;"	d
STRLEN	shellcode.S	/^#define STRLEN	7$/;"	d
Transfer	zoobar/zoodb.py	/^class Transfer(TransferBase):$/;"	c
TransferBase	zoobar/zoodb.py	/^TransferBase = declarative_base()$/;"	v
User	zoobar/login.py	/^class User(object):$/;"	c
ZOOK_CONF	zookld.c	17;"	d	file:
__init__	zoobar/login.py	/^    def __init__(self):$/;"	m	class:User
__tablename__	zoobar/zoodb.py	/^    __tablename__ = "person"$/;"	v	class:Person
__tablename__	zoobar/zoodb.py	/^    __tablename__ = "transfer"$/;"	v	class:Transfer
__try	zoobar/debug.py	/^    def __try(*args, **kwargs):$/;"	f	function:catch_err	file:
addRegistration	zoobar/login.py	/^    def addRegistration(self, username, password):$/;"	m	class:User
amount	zoobar/zoodb.py	/^    amount = Column(Integer)$/;"	v	class:Transfer
ans	check-bugs.py	/^    ans = parse(sys.argv[1])$/;"	v
app	zoobar/__init__.py	/^app = Flask(__name__)$/;"	v
atexit	check_zoobar.py	/^import atexit$/;"	i
auth	zoobar/login.py	/^import auth$/;"	i
balance	zoobar/bank.py	/^def balance(username):$/;"	f
bank	zoobar/login.py	/^import bank$/;"	i
bank	zoobar/transfer.py	/^import bank$/;"	i
bank	zoobar/users.py	/^import bank$/;"	i
body 	zoobar/media/zoobar.css	/^body { $/;"	s
build_exploit	exploit-template.py	/^def build_exploit(shellcode):$/;"	f
calladdr	shellcode.S	/^ calladdr:$/;"	l
catch_err	zoobar/__init__.py	/^from debug import catch_err$/;"	i
catch_err	zoobar/debug.py	/^def catch_err(f):$/;"	f
catch_err	zoobar/zoobarjs.py	/^from debug import catch_err$/;"	i
cgi_gid	http.c	/^static int cgi_gid = -1;$/;"	v	file:
cgi_uid	http.c	/^static int cgi_uid = -1;$/;"	v	file:
check	z_client.py	/^def check():$/;"	f
checkCookie	zoobar/login.py	/^    def checkCookie(self, cookie):$/;"	m	class:User
checkLogin	zoobar/login.py	/^    def checkLogin(self, username, password):$/;"	m	class:User
check_ex0	check_zoobar.py	/^def check_ex0():$/;"	f
check_token	zoobar/auth.py	/^def check_token(username, token):$/;"	f
check_zoobars	z_client.py	/^def check_zoobars(html, user, zoobars, zmsg):$/;"	f
cleanup	check-part2.sh	/^cleanup() {$/;"	f
cleanup	check-part3.sh	/^cleanup() {$/;"	f
collections	check-bugs.py	/^import collections$/;"	i
dbsetup	zoobar/zoodb.py	/^def dbsetup(name, base):$/;"	f
dir_join	http.c	/^void dir_join(char *dst, const char *dirname, const char *filename) {$/;"	f
disable_xss_protection	zoobar/__init__.py	/^def disable_xss_protection(response):$/;"	f
div	zoobar/templates/zoobars.js	/^var div = document.getElementById("myZoobars");$/;"	v
env_deserialize	http.c	/^void env_deserialize(const char *env, size_t len)$/;"	f
fdprintf	http.c	/^void fdprintf(int fd, char *fmt, ...)$/;"	f
file_read	check_zoobar.py	/^def file_read(pn):$/;"	f
file_read	z_client.py	/^def file_read(pn):$/;"	f
file_write	z_client.py	/^def file_write(pn, data):$/;"	f
g	zoobar/__init__.py	/^from flask import Flask, g$/;"	i
g	zoobar/index.py	/^from flask import g, render_template, request$/;"	i
g	zoobar/login.py	/^from flask import g, redirect, render_template, request, url_for, Markup$/;"	i
g	zoobar/transfer.py	/^from flask import g, render_template, request$/;"	i
g	zoobar/users.py	/^from flask import g, render_template, request, Markup$/;"	i
g	zoobar/zoobarjs.py	/^from flask import g, render_template, make_response$/;"	i
get	z_client.py	/^def get(url, cookies):$/;"	f
get_log	zoobar/bank.py	/^def get_log(username):$/;"	f
gids	zookld.c	/^static gid_t gids[MAX_GIDS];$/;"	v	file:
green	check_zoobar.py	/^def green(s):$/;"	f
group_parse_cb	zookld.c	/^static int group_parse_cb(const char *gid_str, int len, void *arg)$/;"	f	file:
h1	zoobar/media/zoobar.css	/^h1, h2, h1 a { text-align: center; color: #555555; }$/;"	s
h1 	zoobar/media/zoobar.css	/^h1 { margin: 0em 100px 0em 100px; }$/;"	s
h1 a 	zoobar/media/zoobar.css	/^h1 a { text-decoration: none; }$/;"	s
h1 a 	zoobar/media/zoobar.css	/^h1, h2, h1 a { text-align: center; color: #555555; }$/;"	s
h2	zoobar/media/zoobar.css	/^h1, h2, h1 a { text-align: center; color: #555555; }$/;"	s
h2 	zoobar/media/zoobar.css	/^h2 { margin: 0em 1em 1em 1em; font-size: 1em; }$/;"	s
hashlib	zoobar/auth.py	/^import hashlib$/;"	i
http_err	http.c	/^void http_err(int fd, int code, char *fmt, ...)$/;"	f
http_read_line	http.c	/^int http_read_line(int fd, char *buf, size_t size)$/;"	f
http_request_headers	http.c	/^const char *http_request_headers(int fd)$/;"	f
http_request_line	http.c	/^const char *http_request_line(int fd, char *reqpath, char *env, size_t *env_len)$/;"	f
http_serve	http.c	/^void http_serve(int fd, const char *name)$/;"	f
http_serve_directory	http.c	/^void http_serve_directory(int fd, const char *pn) {$/;"	f
http_serve_executable	http.c	/^void http_serve_executable(int fd, const char *pn)$/;"	f
http_serve_file	http.c	/^void http_serve_file(int fd, const char *pn)$/;"	f
http_serve_none	http.c	/^void http_serve_none(int fd, const char *pn)$/;"	f
http_set_executable_uid_gid	http.c	/^http_set_executable_uid_gid(int uid, int gid)$/;"	f
id	zoobar/zoodb.py	/^    id = Column(Integer, primary_key=True)$/;"	v	class:Transfer
index	zoobar/__init__.py	/^import index$/;"	i
index	zoobar/index.py	/^def index():$/;"	f
killall	check_zoobar.py	/^def killall():$/;"	f
launch_svc	zookld.c	/^pid_t launch_svc(CONF *conf, const char *name)$/;"	f
log	check_zoobar.py	/^def log(*m):$/;"	f
log	zoobar/debug.py	/^def log(msg):$/;"	f
log_exit	check_zoobar.py	/^def log_exit(*m):$/;"	f
logged_in	zoobar/login.py	/^def logged_in():$/;"	f
login	z_client.py	/^def login(user, password):$/;"	f
login	zoobar/__init__.py	/^import login$/;"	i
login	zoobar/auth.py	/^def login(username, password):$/;"	f
login	zoobar/login.py	/^def login():$/;"	f
login	zoobar/zoobarjs.py	/^import login$/;"	i
loginCookie	zoobar/login.py	/^    def loginCookie(self, username, token):$/;"	m	class:User
login_page	z_client.py	/^def login_page(op, user, password):$/;"	f
loginhelper	zoobar/login.py	/^    def loginhelper(*args, **kwargs):$/;"	f	function:requirelogin
logout	zoobar/login.py	/^    def logout(self):$/;"	m	class:User
logout	zoobar/login.py	/^def logout():$/;"	f
main	check_zoobar.py	/^def main():$/;"	f
main	run-shellcode.c	/^main(int ac, char **av)$/;"	f
main	shellcode.S	/^ main:$/;"	l
main	submit.py	/^def main(filename):$/;"	f
main	zoobar/debug.py	/^def main():$/;"	f
main	zookd.c	/^int main(int argc, char **argv)$/;"	f
main	zookfs.c	/^int main(int argc, char **argv)$/;"	f
main	zookld.c	/^int main(int argc, char **argv)$/;"	f
make_response	zoobar/zoobarjs.py	/^from flask import g, render_template, make_response$/;"	i
newtoken	zoobar/auth.py	/^def newtoken(db, person):$/;"	f
ngids	zookld.c	/^static int ngids = 0;$/;"	v	file:
nsvcs	zookd.c	/^static int nsvcs;$/;"	v	file:
nsvcs	zookld.c	/^static int nsvcs = 0; \/* actual number of services *\/$/;"	v	file:
os	check_zoobar.py	/^import os$/;"	i
os	submit.py	/^import os.path$/;"	i
os	zoobar/zoodb.py	/^import os$/;"	i
parse	check-bugs.py	/^def parse(pn):$/;"	f
password	zoobar/zoodb.py	/^    password = Column(String(128))$/;"	v	class:Person
path	submit.py	/^import os.path$/;"	i
person_setup	zoobar/zoodb.py	/^def person_setup():$/;"	f
popladdr	shellcode.S	/^ popladdr:$/;"	l
post	z_client.py	/^def post(url, cookies, postdata):$/;"	f
pprint	check-bugs.py	/^import pprint$/;"	i
print_wget_log	z_client.py	/^def print_wget_log():$/;"	f
process_client	zookd.c	/^static void process_client(int fd)$/;"	f	file:
profile	zoobar/zoodb.py	/^    profile = Column(String(5000), nullable=False, default="")$/;"	v	class:Person
random	zoobar/auth.py	/^import random$/;"	i
random	zoobar/login.py	/^import random$/;"	i
re	check-bugs.py	/^import re$/;"	i
re	z_client.py	/^import re$/;"	i
recipient	zoobar/zoodb.py	/^    recipient = Column(String(128))$/;"	v	class:Transfer
recvfd	http.c	/^ssize_t recvfd(int socket, void *buffer, size_t length, int *fd)$/;"	f
red	check_zoobar.py	/^def red(s):$/;"	f
redirect	zoobar/login.py	/^from flask import g, redirect, render_template, request, url_for, Markup$/;"	i
register	z_client.py	/^def register(user, password):$/;"	f
register	zoobar/auth.py	/^def register(username, password):$/;"	f
render_template	zoobar/index.py	/^from flask import g, render_template, request$/;"	i
render_template	zoobar/login.py	/^from flask import g, redirect, render_template, request, url_for, Markup$/;"	i
render_template	zoobar/transfer.py	/^from flask import g, render_template, request$/;"	i
render_template	zoobar/users.py	/^from flask import g, render_template, request, Markup$/;"	i
render_template	zoobar/zoobarjs.py	/^from flask import g, render_template, make_response$/;"	i
req	exploit-template.py	/^    req = build_exploit(shellcode)$/;"	v
request	zoobar/index.py	/^from flask import g, render_template, request$/;"	i
request	zoobar/login.py	/^from flask import g, redirect, render_template, request, url_for, Markup$/;"	i
request	zoobar/transfer.py	/^from flask import g, render_template, request$/;"	i
request	zoobar/users.py	/^from flask import g, render_template, request, Markup$/;"	i
requirelogin	zoobar/index.py	/^from login import requirelogin$/;"	i
requirelogin	zoobar/login.py	/^def requirelogin(page):$/;"	f
requirelogin	zoobar/transfer.py	/^from login import requirelogin$/;"	i
requirelogin	zoobar/users.py	/^from login import requirelogin$/;"	i
resp	exploit-template.py	/^    resp = send_req(sys.argv[1], int(sys.argv[2]), req)$/;"	v
run_wget	z_client.py	/^def run_wget(opts=[]):$/;"	f
say_fail	check-bugs.py	/^def say_fail(reason):$/;"	f
say_pass	check-bugs.py	/^def say_pass(reason):$/;"	f
send_req	exploit-template.py	/^def send_req(host, port, req):$/;"	f
sender	zoobar/zoodb.py	/^    sender = Column(String(128))$/;"	v	class:Transfer
sendfd	http.c	/^ssize_t sendfd(int socket, const void *buffer, size_t length, int fd)$/;"	f
service_parse_cb	zookld.c	/^static int service_parse_cb(const char *name, int len, void *arg)$/;"	f	file:
setPerson	zoobar/login.py	/^    def setPerson(self, username, token):$/;"	m	class:User
setup	check_zoobar.py	/^def setup():$/;"	f
sh	check_zoobar.py	/^def sh(cmd, exit_onerr=True):$/;"	f
shellcode	exploit-template.py	/^    shellcode = shellfile.read()$/;"	v
shellfile	exploit-template.py	/^    shellfile = open("shellcode.bin", "r")$/;"	v
showZoobars	zoobar/templates/users.html	/^  function showZoobars(zoobars) {$/;"	f
socket	exploit-template.py	/^import socket$/;"	i
split_path	http.c	/^void split_path(char *pn)$/;"	f
sqlite3	check_zoobar.py	/^import sqlite3$/;"	i
stack_buffer	exploit-template.py	/^stack_buffer = 0x34567890$/;"	v
stack_retaddr	exploit-template.py	/^stack_retaddr = stack_saved_ebp + 4$/;"	v
stack_saved_ebp	exploit-template.py	/^stack_saved_ebp = 0x12345678$/;"	v
start_server	zookld.c	/^static int start_server(const char *portstr)$/;"	f	file:
stat_summary	check-bugs.py	/^def stat_summary(ans):$/;"	f
struct	exploit-template.py	/^import struct$/;"	i
subprocess	check_zoobar.py	/^import subprocess$/;"	i
subprocess	submit.py	/^import subprocess$/;"	i
subprocess	z_client.py	/^import subprocess$/;"	i
svcfds	zookd.c	/^static int svcfds[MAX_SERVICES];$/;"	v	file:
svcfds	zookld.c	/^static int svcfds[MAX_SERVICES];$/;"	v	file:
svcnames	zookld.c	/^static char svcnames[MAX_SERVICES][256];$/;"	v	file:
svcurls	zookd.c	/^static regex_t svcurls[MAX_SERVICES];$/;"	v	file:
sys	check-bugs.py	/^import sys$/;"	i
sys	check_zoobar.py	/^import sys$/;"	i
sys	exploit-template.py	/^import sys$/;"	i
sys	submit.py	/^import sys$/;"	i
sys	zoobar/debug.py	/^import sys$/;"	i
sys	zoobar/zoodb.py	/^import sys$/;"	i
thisdir	check_zoobar.py	/^thisdir = os.path.dirname(os.path.abspath(__file__))$/;"	v
time	check_zoobar.py	/^import time$/;"	i
time	zoobar/bank.py	/^import time$/;"	i
time	zoobar/zoodb.py	/^    time = Column(String)$/;"	v	class:Transfer
token	zoobar/zoodb.py	/^    token = Column(String(128))$/;"	v	class:Person
touch	http.c	/^void touch(const char *name) {$/;"	f
traceback	check_zoobar.py	/^import traceback$/;"	i
traceback	exploit-template.py	/^import traceback$/;"	i
traceback	zoobar/debug.py	/^import traceback$/;"	i
traceback	zoobar/transfer.py	/^import traceback$/;"	i
transfer	z_client.py	/^def transfer(sender_cookies, recipient, zoobars):$/;"	f
transfer	zoobar/__init__.py	/^import transfer$/;"	i
transfer	zoobar/bank.py	/^def transfer(sender, recipient, zoobars):$/;"	f
transfer	zoobar/transfer.py	/^def transfer():$/;"	f
transfer_setup	zoobar/zoodb.py	/^def transfer_setup():$/;"	f
url_decode	http.c	/^void url_decode(char *dst, const char *src)$/;"	f
url_for	zoobar/login.py	/^from flask import g, redirect, render_template, request, url_for, Markup$/;"	i
urllib	exploit-template.py	/^import urllib$/;"	i
urllib	submit.py	/^import urllib$/;"	i
username	zoobar/zoodb.py	/^    username = Column(String(128), primary_key=True)$/;"	v	class:Person
users	zoobar/__init__.py	/^import users$/;"	i
users	zoobar/users.py	/^def users():$/;"	f
valid_cgi_script	http.c	/^valid_cgi_script(struct stat *st)$/;"	f	file:
verbose	check_zoobar.py	/^verbose = False$/;"	v
view_user	z_client.py	/^def view_user(cookies, username):$/;"	f
wget_log	z_client.py	/^wget_log = []$/;"	v
wraps	zoobar/debug.py	/^from functools import wraps$/;"	i
wraps	zoobar/login.py	/^from functools import wraps$/;"	i
z_client	check_zoobar.py	/^import z_client$/;"	i
zoobarjs	zoobar/__init__.py	/^import zoobarjs$/;"	i
zoobarjs	zoobar/zoobarjs.py	/^def zoobarjs():$/;"	f
zoobars	zoobar/zoodb.py	/^    zoobars = Column(Integer, nullable=False, default=10)$/;"	v	class:Person
zoodb	zoobar/__init__.py	/^import zoodb$/;"	i
